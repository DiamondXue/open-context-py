-----------------------------
Deployment Instructions
-----------------------------

Sadly, setup and configuration is not the easiest thing in the world,
especially for people new to Django. This document provides
some tips and methods to get past deployment issues encountered
for Open Context.

These installation instructions center on deploying the application
on a Debian Linux server in a Python virtual environment. The virtual 
environment needs to use a Python 3+ interpreter. The assumption here is
that you've got super-user permissions on your server.

(1) Make sure your server has all the needed Python installations. First,
you'll Python 3 installed. To do so, run the
following command:

sudo apt-get install python3

This will install Python 3. It also seems best to install python-dev
for both Python 2+ and Python 3. For some reason, it seems you need
python-dev for both of these versions of Python in order to get Scipy
to install. Here are some instructions:

sudo apt-get install python-dev
sudo apt-get install python3-dev


(2) Install pip for Python.

python get-pip.py

(3) Install virtualenv for Python

(4) Navigate over to a directory where you want to install this application.
Then create a virtual environment there, using the Python 3 interpreter as so:

sudo virtualenv -p /usr/bin/python3.X oc-venv

(5) If successful, then you've got a virtual environment ready!

(6) You'll also need to update all everything on the server.

apt-get update

(7) Install Postgres 9.4. This is a bit more involved, since currently,
Debian defaults to installing Postgres 9.1 or 9.2. Follow the instructions
on the Postgres website for installation of Postgres 9.4:

http://www.postgresql.org/download/linux/debian/

Be sure to have a Postgres user associated with your database. Be sure
to also set the UNIX password for the postgres user (!) otherwise, you
will have a very frustrating time (take my word for it) trying to configure
Postgres, especially if you need to do something "fancy" like use a 
non-default location for Postgres to store data.

There can be some hassel in using another drive with Postgres to store your
database. With Google Cloud look at:

https://cloud.google.com/compute/docs/disks

First, mount your drive onto your instance. Then make sure the postgres
UNIX-user has permissions on that mounted drive location. Once you do that
then switch UNIX users to postgres with:

su postgres

If you've been good, you should be able to enter the password you set
for postgres. Otherwise you'll need to do that.

Then change the location for postgres to store data:

sudo /usr/lib/postgresql/9.4/bin/initdb -D /mnt/oc-data/postgresdata

More information at: http://www.whiteboardcoder.com/2012/04/change-postgres-datadirectory-folder.html

If that doesn't work, then you'll need to edit a configuration file.

BEFORE YOU EDIT!! STOP POSTGRES!
sudo /etc/init.d/postgresql stop

Once stopped, you'll find the configuration file in a location like:
/etc/postgresql/9.4/main/postgresql.conf

Change the PGDATA directory to the directory you establishe for the data,
with all the proper permissions added for postgres. If you don't have the
permissions, you won't be able to restart Postgres with:

sudo /etc/init.d/postgresql restart 
 

(8) Install the LAPACK and BLAS libraries to the server. 
These are needed for running the Numpy and Scipy Python libraries.
Numpy and Scipy installation are likely to be the biggest
configuration hurdle you'll encounter in deploying this.

sudo apt-get install liblapack-dev
sudo apt-get install libblas-dev

You may also have to install a fortran(!) interpreter.
sudo apt-get install gfortran

Here are some useful instructions:
http://blog.abhinav.ca/blog/2013/09/19/pip-install-scipy-on-ubuntu/

(9) You should now be able to install all of the libraries
needed for this application into a virtual environment. Make sure
you activate the virtual environment:

source bin/activate

Once the environmet is active, start by installing pip 
to your virtual enviornment:

python get-pip.py

If pip fails to install a library, try easy_install. If that fails, 
there are probably dependencies (above) that you didn't
install yet. You may have an issue with installing psycopg2,
which requires another library to install first as:

sudo apt-get install libpq-dev

(10) Install git if you want to connect to the GitHub repository
for the project's production branch (recommended): 

git clone -b production git@github.com:ekansa/open-context-py.git
sudo git clone -b production https://github.com/ekansa/open-context-py.git

(11) Add the source code from here. There are settings you need
to provide. Edit "change-secrets.json" to be "settings.json",
and add the currect passwords etc.




